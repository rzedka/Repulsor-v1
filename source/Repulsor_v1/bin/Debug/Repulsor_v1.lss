
bin\Debug\Repulsor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  00000d00  00000db4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d00  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004f  0080018e  0080018e  00000e42  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000e42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000c0  00000000  00000000  00000e45  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000245  00000000  00000000  00000f05  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000906  00000000  00000000  0000114a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000463  00000000  00000000  00001a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a85  00000000  00000000  00001eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00002938  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d6  00000000  00000000  00002ab8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 b8 04 	jmp	0x970	; 0x970 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e0       	ldi	r30, 0x00	; 0
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ae 38       	cpi	r26, 0x8E	; 142
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	ae e8       	ldi	r26, 0x8E	; 142
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 3d       	cpi	r26, 0xDD	; 221
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 3a 01 	call	0x274	; 0x274 <main>
  9e:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_setup>:
#include "adc.h"



void ADC_setup(void)
{
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
//    ADMUX |= (0<<REFS1)|(0<<REFS0)|(1<<ADLAR)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(0<<MUX0);
    /// AREF pin = Reference, ADC0 input pin, Left Adjusted result (only 8 MSbits are valid)

     ADMUX |= (0<<REFS1)|(0<<REFS0)|(0<<ADLAR)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(0<<MUX0);
  ae:	ac e7       	ldi	r26, 0x7C	; 124
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	ec e7       	ldi	r30, 0x7C	; 124
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8c 93       	st	X, r24
    /// AREF pin = Reference, ADC0 input pin, Right Adjusted result (10 MSbits are valid)
    /// ADCH = [0 0 0 0 0 0 A9 A8], ADCL = [A7 -- A0]
    ADCSRA |= (1<<ADEN)|(0<<ADSC)|(0<<ADATE)|(1<<ADIE)|(1<<ADPS2)|(0<<ADPS1)|(1<<ADPS0);
  ba:	aa e7       	ldi	r26, 0x7A	; 122
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	8d 68       	ori	r24, 0x8D	; 141
  c6:	8c 93       	st	X, r24
    /// ADC Enabled,,  f_clk_adc = 500 kHz (P = 32), autotriggering OFF
    /// =============== MAXIMUM F_CLK_ADC = 1 MHz !!!! ===================================
    /// ADC Interrupt Enabled, Auto-triggering Enabled,

    ADCSRB |= (0<<ADTS2)|(0<<ADTS1)|(0<<ADTS0);
  c8:	ab e7       	ldi	r26, 0x7B	; 123
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	eb e7       	ldi	r30, 0x7B	; 123
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	8c 93       	st	X, r24
    /// ADC conversion Starts by triggering it manually
    adc_value = 0;
  d4:	10 92 c4 01 	sts	0x01C4, r1
  d8:	10 92 c3 01 	sts	0x01C3, r1
}
  dc:	cf 91       	pop	r28
  de:	df 91       	pop	r29
  e0:	08 95       	ret

000000e2 <__vector_21>:
//}

/// ============ ISR ============================

ISR(ADC_vect)
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	2f 93       	push	r18
  ee:	3f 93       	push	r19
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31
  f8:	df 93       	push	r29
  fa:	cf 93       	push	r28
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
    /// (ADLAR == 1) left adjusted result (8 bits)
//    adc_value = ADCL;
//    adc_value = ADCH;

    /// (ADLAR == 0) right adjusted 10 bit result
    adc_value = ADCL; // 0x00FF
 100:	e8 e7       	ldi	r30, 0x78	; 120
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	88 2f       	mov	r24, r24
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 c4 01 	sts	0x01C4, r25
 10e:	80 93 c3 01 	sts	0x01C3, r24
    adc_value |= (uint16_t)(ADCH<<8); // 0x03FF
 112:	e9 e7       	ldi	r30, 0x79	; 121
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	88 2f       	mov	r24, r24
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	98 2f       	mov	r25, r24
 11e:	88 27       	eor	r24, r24
 120:	9c 01       	movw	r18, r24
 122:	80 91 c3 01 	lds	r24, 0x01C3
 126:	90 91 c4 01 	lds	r25, 0x01C4
 12a:	82 2b       	or	r24, r18
 12c:	93 2b       	or	r25, r19
 12e:	90 93 c4 01 	sts	0x01C4, r25
 132:	80 93 c3 01 	sts	0x01C3, r24

    adc_flag++;
 136:	80 91 c2 01 	lds	r24, 0x01C2
 13a:	8f 5f       	subi	r24, 0xFF	; 255
 13c:	80 93 c2 01 	sts	0x01C2, r24
}
 140:	cf 91       	pop	r28
 142:	df 91       	pop	r29
 144:	ff 91       	pop	r31
 146:	ef 91       	pop	r30
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	3f 91       	pop	r19
 14e:	2f 91       	pop	r18
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <GPIO_setup>:
#include "gpio.h"

void GPIO_setup(void)
{
 15a:	df 93       	push	r29
 15c:	cf 93       	push	r28
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
    DDR_LED |= (1<<LED_IDLE_PIN);   // output
 162:	a4 e2       	ldi	r26, 0x24	; 36
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	e4 e2       	ldi	r30, 0x24	; 36
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	80 62       	ori	r24, 0x20	; 32
 16e:	8c 93       	st	X, r24
    PORT_LED &= ~(1<<LED_IDLE_PIN); // LED_IDLE OFF
 170:	a5 e2       	ldi	r26, 0x25	; 37
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	e5 e2       	ldi	r30, 0x25	; 37
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	8f 7d       	andi	r24, 0xDF	; 223
 17c:	8c 93       	st	X, r24

    DDR_LED |= (1<<LED_OVF_PIN);   // output
 17e:	a4 e2       	ldi	r26, 0x24	; 36
 180:	b0 e0       	ldi	r27, 0x00	; 0
 182:	e4 e2       	ldi	r30, 0x24	; 36
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	80 61       	ori	r24, 0x10	; 16
 18a:	8c 93       	st	X, r24
    PORT_LED &= ~(1<<LED_OVF_PIN); // LED_OVF OFF
 18c:	a5 e2       	ldi	r26, 0x25	; 37
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	e5 e2       	ldi	r30, 0x25	; 37
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	8f 7e       	andi	r24, 0xEF	; 239
 198:	8c 93       	st	X, r24

    DDR_BTN &= ~(1<<PIN_BTN0);   // input
 19a:	aa e2       	ldi	r26, 0x2A	; 42
 19c:	b0 e0       	ldi	r27, 0x00	; 0
 19e:	ea e2       	ldi	r30, 0x2A	; 42
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	8f 7e       	andi	r24, 0xEF	; 239
 1a6:	8c 93       	st	X, r24
    PORT_BTN |= (1<<PIN_BTN0); // internal pull-up resistor
 1a8:	ab e2       	ldi	r26, 0x2B	; 43
 1aa:	b0 e0       	ldi	r27, 0x00	; 0
 1ac:	eb e2       	ldi	r30, 0x2B	; 43
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	80 61       	ori	r24, 0x10	; 16
 1b4:	8c 93       	st	X, r24

    ///  The MOSFET is at D4 (OC0A, TIMER0-driven pin)
    DDR_FET |= (1<<PIN_FET0);
 1b6:	aa e2       	ldi	r26, 0x2A	; 42
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	ea e2       	ldi	r30, 0x2A	; 42
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	80 64       	ori	r24, 0x40	; 64
 1c2:	8c 93       	st	X, r24
//    PORT_FET &= ~(1<<PIN_FET0); // FET0 OFF

    led_flag = 0;
 1c4:	10 92 da 01 	sts	0x01DA, r1
}
 1c8:	cf 91       	pop	r28
 1ca:	df 91       	pop	r29
 1cc:	08 95       	ret

000001ce <LED_toggle>:



void LED_toggle(uint8_t led_bit)
{   /// led_bit = 0x01, 0x02, 0x04, 0x08, ...
 1ce:	df 93       	push	r29
 1d0:	cf 93       	push	r28
 1d2:	00 d0       	rcall	.+0      	; 0x1d4 <LED_toggle+0x6>
 1d4:	cd b7       	in	r28, 0x3d	; 61
 1d6:	de b7       	in	r29, 0x3e	; 62
 1d8:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t bitshift = 0;
 1da:	19 82       	std	Y+1, r1	; 0x01

    switch(led_bit){
 1dc:	8a 81       	ldd	r24, Y+2	; 0x02
 1de:	88 2f       	mov	r24, r24
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	91 05       	cpc	r25, r1
 1e6:	19 f4       	brne	.+6      	; 0x1ee <LED_toggle+0x20>
    case 0x01: /// LED0
            bitshift = LED_IDLE_PIN;
 1e8:	85 e0       	ldi	r24, 0x05	; 5
 1ea:	89 83       	std	Y+1, r24	; 0x01
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <LED_toggle+0x24>
//        break;
//    case 0x04: /// IDLE process LED
//            bitshift = LEDx_PIN;
//        break;
    default:   /// LED0
            bitshift = LED_IDLE_PIN;
 1ee:	85 e0       	ldi	r24, 0x05	; 5
 1f0:	89 83       	std	Y+1, r24	; 0x01

    }// end switch

    if(led_flag&led_bit){
 1f2:	80 91 da 01 	lds	r24, 0x01DA
 1f6:	9a 81       	ldd	r25, Y+2	; 0x02
 1f8:	89 23       	and	r24, r25
 1fa:	88 23       	and	r24, r24
 1fc:	e9 f0       	breq	.+58     	; 0x238 <LED_toggle+0x6a>
        led_flag &= ~led_bit;
 1fe:	8a 81       	ldd	r24, Y+2	; 0x02
 200:	98 2f       	mov	r25, r24
 202:	90 95       	com	r25
 204:	80 91 da 01 	lds	r24, 0x01DA
 208:	89 23       	and	r24, r25
 20a:	80 93 da 01 	sts	0x01DA, r24
        PORT_LED &= ~(1<<bitshift);
 20e:	a5 e2       	ldi	r26, 0x25	; 37
 210:	b0 e0       	ldi	r27, 0x00	; 0
 212:	e5 e2       	ldi	r30, 0x25	; 37
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	48 2f       	mov	r20, r24
 21a:	89 81       	ldd	r24, Y+1	; 0x01
 21c:	28 2f       	mov	r18, r24
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 2e       	mov	r0, r18
 226:	02 c0       	rjmp	.+4      	; 0x22c <LED_toggle+0x5e>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	0a 94       	dec	r0
 22e:	e2 f7       	brpl	.-8      	; 0x228 <LED_toggle+0x5a>
 230:	80 95       	com	r24
 232:	84 23       	and	r24, r20
 234:	8c 93       	st	X, r24
 236:	19 c0       	rjmp	.+50     	; 0x26a <LED_toggle+0x9c>
    }else{ /// The LED is off
        led_flag |= led_bit;
 238:	90 91 da 01 	lds	r25, 0x01DA
 23c:	8a 81       	ldd	r24, Y+2	; 0x02
 23e:	89 2b       	or	r24, r25
 240:	80 93 da 01 	sts	0x01DA, r24
        PORT_LED |= (1<<bitshift);
 244:	a5 e2       	ldi	r26, 0x25	; 37
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	e5 e2       	ldi	r30, 0x25	; 37
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	48 2f       	mov	r20, r24
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	28 2f       	mov	r18, r24
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 2e       	mov	r0, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <LED_toggle+0x94>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	0a 94       	dec	r0
 264:	e2 f7       	brpl	.-8      	; 0x25e <LED_toggle+0x90>
 266:	84 2b       	or	r24, r20
 268:	8c 93       	st	X, r24
    }
}
 26a:	0f 90       	pop	r0
 26c:	0f 90       	pop	r0
 26e:	cf 91       	pop	r28
 270:	df 91       	pop	r29
 272:	08 95       	ret

00000274 <main>:

/// ====================


int main(void)
{
 274:	ef 92       	push	r14
 276:	ff 92       	push	r15
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
 27c:	df 93       	push	r29
 27e:	cf 93       	push	r28
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
 284:	c7 54       	subi	r28, 0x47	; 71
 286:	d0 40       	sbci	r29, 0x00	; 0
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	f8 94       	cli
 28c:	de bf       	out	0x3e, r29	; 62
 28e:	0f be       	out	0x3f, r0	; 63
 290:	cd bf       	out	0x3d, r28	; 61

    uint16_t ref_timer = 0;
 292:	1e 86       	std	Y+14, r1	; 0x0e
 294:	1d 86       	std	Y+13, r1	; 0x0d
    timer1_cnt = 0;
 296:	10 92 dc 01 	sts	0x01DC, r1
 29a:	10 92 db 01 	sts	0x01DB, r1
    /// PID variables:
    int16_t setpoint = SET_MIN;
 29e:	82 e3       	ldi	r24, 0x32	; 50
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	98 8b       	std	Y+16, r25	; 0x10
 2a4:	8f 87       	std	Y+15, r24	; 0x0f
    int16_t error[2] = {0,0};
 2a6:	1a 8a       	std	Y+18, r1	; 0x12
 2a8:	19 8a       	std	Y+17, r1	; 0x11
 2aa:	1c 8a       	std	Y+20, r1	; 0x14
 2ac:	1b 8a       	std	Y+19, r1	; 0x13

    uint16_t k_p = 100;
 2ae:	84 e6       	ldi	r24, 0x64	; 100
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	9e 8b       	std	Y+22, r25	; 0x16
 2b4:	8d 8b       	std	Y+21, r24	; 0x15
    uint16_t k_i = 0;
 2b6:	18 8e       	std	Y+24, r1	; 0x18
 2b8:	1f 8a       	std	Y+23, r1	; 0x17
    uint16_t k_d = 100;
 2ba:	84 e6       	ldi	r24, 0x64	; 100
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	9a 8f       	std	Y+26, r25	; 0x1a
 2c0:	89 8f       	std	Y+25, r24	; 0x19
    int16_t y_p = 0;
 2c2:	1c 86       	std	Y+12, r1	; 0x0c
 2c4:	1b 86       	std	Y+11, r1	; 0x0b
    int16_t y_i[3] = {0,0,0};
 2c6:	ae 01       	movw	r20, r28
 2c8:	45 5e       	subi	r20, 0xE5	; 229
 2ca:	5f 4f       	sbci	r21, 0xFF	; 255
 2cc:	25 96       	adiw	r28, 0x05	; 5
 2ce:	5f af       	std	Y+63, r21	; 0x3f
 2d0:	4e af       	std	Y+62, r20	; 0x3e
 2d2:	25 97       	sbiw	r28, 0x05	; 5
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	27 96       	adiw	r28, 0x07	; 7
 2da:	9f af       	std	Y+63, r25	; 0x3f
 2dc:	8e af       	std	Y+62, r24	; 0x3e
 2de:	27 97       	sbiw	r28, 0x07	; 7
 2e0:	96 e0       	ldi	r25, 0x06	; 6
 2e2:	28 96       	adiw	r28, 0x08	; 8
 2e4:	9f af       	std	Y+63, r25	; 0x3f
 2e6:	28 97       	sbiw	r28, 0x08	; 8
 2e8:	27 96       	adiw	r28, 0x07	; 7
 2ea:	ee ad       	ldd	r30, Y+62	; 0x3e
 2ec:	ff ad       	ldd	r31, Y+63	; 0x3f
 2ee:	27 97       	sbiw	r28, 0x07	; 7
 2f0:	00 80       	ld	r0, Z
 2f2:	27 96       	adiw	r28, 0x07	; 7
 2f4:	4e ad       	ldd	r20, Y+62	; 0x3e
 2f6:	5f ad       	ldd	r21, Y+63	; 0x3f
 2f8:	27 97       	sbiw	r28, 0x07	; 7
 2fa:	4f 5f       	subi	r20, 0xFF	; 255
 2fc:	5f 4f       	sbci	r21, 0xFF	; 255
 2fe:	27 96       	adiw	r28, 0x07	; 7
 300:	5f af       	std	Y+63, r21	; 0x3f
 302:	4e af       	std	Y+62, r20	; 0x3e
 304:	27 97       	sbiw	r28, 0x07	; 7
 306:	25 96       	adiw	r28, 0x05	; 5
 308:	ee ad       	ldd	r30, Y+62	; 0x3e
 30a:	ff ad       	ldd	r31, Y+63	; 0x3f
 30c:	25 97       	sbiw	r28, 0x05	; 5
 30e:	00 82       	st	Z, r0
 310:	25 96       	adiw	r28, 0x05	; 5
 312:	4e ad       	ldd	r20, Y+62	; 0x3e
 314:	5f ad       	ldd	r21, Y+63	; 0x3f
 316:	25 97       	sbiw	r28, 0x05	; 5
 318:	4f 5f       	subi	r20, 0xFF	; 255
 31a:	5f 4f       	sbci	r21, 0xFF	; 255
 31c:	25 96       	adiw	r28, 0x05	; 5
 31e:	5f af       	std	Y+63, r21	; 0x3f
 320:	4e af       	std	Y+62, r20	; 0x3e
 322:	25 97       	sbiw	r28, 0x05	; 5
 324:	28 96       	adiw	r28, 0x08	; 8
 326:	5f ad       	ldd	r21, Y+63	; 0x3f
 328:	28 97       	sbiw	r28, 0x08	; 8
 32a:	51 50       	subi	r21, 0x01	; 1
 32c:	28 96       	adiw	r28, 0x08	; 8
 32e:	5f af       	std	Y+63, r21	; 0x3f
 330:	28 97       	sbiw	r28, 0x08	; 8
 332:	28 96       	adiw	r28, 0x08	; 8
 334:	8f ad       	ldd	r24, Y+63	; 0x3f
 336:	28 97       	sbiw	r28, 0x08	; 8
 338:	88 23       	and	r24, r24
 33a:	b1 f6       	brne	.-84     	; 0x2e8 <main+0x74>
    int16_t y_d = 0;
 33c:	1a 86       	std	Y+10, r1	; 0x0a
 33e:	19 86       	std	Y+9, r1	; 0x09
    int16_t y_sum = 0;
 340:	18 86       	std	Y+8, r1	; 0x08
 342:	1f 82       	std	Y+7, r1	; 0x07
    uint8_t pwm_value = 0;
 344:	1e 82       	std	Y+6, r1	; 0x06
    uint8_t mode = 0; /// oscillation mode
 346:	19 a2       	std	Y+33, r1	; 0x21
    //uint16_t aux_cnt = 0;
    //int8_t osc_step = 1;

    uint8_t adc_flag_f = 0;
 348:	1d 82       	std	Y+5, r1	; 0x05
    uint8_t adc_cal_flag = 0; /// ADC calibration done after RESET
 34a:	1c 82       	std	Y+4, r1	; 0x04
    uint16_t adc_cal_value = 0;
 34c:	1b 82       	std	Y+3, r1	; 0x03
 34e:	1a 82       	std	Y+2, r1	; 0x02

    #ifdef UART_TERM
        USART_init();
 350:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <USART_init>
        uint8_t uart_flag_f = 0;
 354:	19 82       	std	Y+1, r1	; 0x01
        char buffer [33];
    #endif // UART_TERM

    GPIO_setup();
 356:	0e 94 ad 00 	call	0x15a	; 0x15a <GPIO_setup>

//    EIMSK |= (1<< INT0);

    TIMER0_PWM_setup(); /// PWM, 7.8125 kHz (driving pin OC0A)
 35a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <TIMER0_PWM_setup>
    TIMER1_setup(); /// (timer 1ms, ADC sampling period)
 35e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <TIMER1_setup>
    ADC_setup(); /// Manual ADC triggering, ISR on,
 362:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_setup>

    sei();/// Enable Interrupts
 366:	78 94       	sei
    #ifdef UART_TERM
        /// ============ Init UART message =============================
        USART_TX_STRING_WAIT("==== Repulsor v1 ====\n");
 368:	86 e0       	ldi	r24, 0x06	; 6
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	0e 94 38 05 	call	0xa70	; 0xa70 <USART_TX_STRING_WAIT>
    /// ======================== LOOP ===================
    while(1){


       /// BACKGROUND BLINK PROCESS:
        if( (TIMER1_get_value() - ref_timer) >= T_IDLE){
 370:	0e 94 a4 04 	call	0x948	; 0x948 <TIMER1_get_value>
 374:	2d 85       	ldd	r18, Y+13	; 0x0d
 376:	3e 85       	ldd	r19, Y+14	; 0x0e
 378:	82 1b       	sub	r24, r18
 37a:	93 0b       	sbc	r25, r19
 37c:	e3 e0       	ldi	r30, 0x03	; 3
 37e:	88 3e       	cpi	r24, 0xE8	; 232
 380:	9e 07       	cpc	r25, r30
 382:	38 f0       	brcs	.+14     	; 0x392 <main+0x11e>
            ref_timer = TIMER1_get_value();
 384:	0e 94 a4 04 	call	0x948	; 0x948 <TIMER1_get_value>
 388:	9e 87       	std	Y+14, r25	; 0x0e
 38a:	8d 87       	std	Y+13, r24	; 0x0d
            LED_toggle(0x01); /// PINB5 (built-in LED)
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED_toggle>
       /// Button debouncer process


       #ifdef UART_TERM
        /// ============ UART Command Reception =============================
        if(uart_flag_f != uart_flag){
 392:	90 91 8e 01 	lds	r25, 0x018E
 396:	89 81       	ldd	r24, Y+1	; 0x01
 398:	89 17       	cp	r24, r25
 39a:	09 f4       	brne	.+2      	; 0x39e <main+0x12a>
 39c:	5b c0       	rjmp	.+182    	; 0x454 <main+0x1e0>
            uart_flag_f = uart_flag;
 39e:	80 91 8e 01 	lds	r24, 0x018E
 3a2:	89 83       	std	Y+1, r24	; 0x01
            PID_CMD_Parser(&setpoint, &k_p, &k_i, &k_d, &y_i[0], &mode);/// int16, uint16, uint16, uint16
 3a4:	ce 01       	movw	r24, r28
 3a6:	0f 96       	adiw	r24, 0x0f	; 15
 3a8:	9e 01       	movw	r18, r28
 3aa:	2b 5e       	subi	r18, 0xEB	; 235
 3ac:	3f 4f       	sbci	r19, 0xFF	; 255
 3ae:	ae 01       	movw	r20, r28
 3b0:	49 5e       	subi	r20, 0xE9	; 233
 3b2:	5f 4f       	sbci	r21, 0xFF	; 255
 3b4:	fe 01       	movw	r30, r28
 3b6:	79 96       	adiw	r30, 0x19	; 25
 3b8:	de 01       	movw	r26, r28
 3ba:	5b 96       	adiw	r26, 0x1b	; 27
 3bc:	0f 2e       	mov	r0, r31
 3be:	f1 e2       	ldi	r31, 0x21	; 33
 3c0:	ef 2e       	mov	r14, r31
 3c2:	ff 24       	eor	r15, r15
 3c4:	f0 2d       	mov	r31, r0
 3c6:	ec 0e       	add	r14, r28
 3c8:	fd 1e       	adc	r15, r29
 3ca:	b9 01       	movw	r22, r18
 3cc:	9f 01       	movw	r18, r30
 3ce:	8d 01       	movw	r16, r26
 3d0:	0e 94 72 03 	call	0x6e4	; 0x6e4 <PID_CMD_Parser>
            USART_TX_STRING_WAIT("set  k_p  k_i  k_d\n");
 3d4:	8d e1       	ldi	r24, 0x1D	; 29
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	0e 94 38 05 	call	0xa70	; 0xa70 <USART_TX_STRING_WAIT>
            USART_TX_STRING_WAIT(itoa(setpoint,buffer,10));
 3dc:	8f 85       	ldd	r24, Y+15	; 0x0f
 3de:	98 89       	ldd	r25, Y+16	; 0x10
 3e0:	9e 01       	movw	r18, r28
 3e2:	2e 5d       	subi	r18, 0xDE	; 222
 3e4:	3f 4f       	sbci	r19, 0xFF	; 255
 3e6:	b9 01       	movw	r22, r18
 3e8:	4a e0       	ldi	r20, 0x0A	; 10
 3ea:	50 e0       	ldi	r21, 0x00	; 0
 3ec:	0e 94 31 06 	call	0xc62	; 0xc62 <itoa>
 3f0:	0e 94 38 05 	call	0xa70	; 0xa70 <USART_TX_STRING_WAIT>
            USART_TX_WAIT(' ');
 3f4:	80 e2       	ldi	r24, 0x20	; 32
 3f6:	0e 94 21 05 	call	0xa42	; 0xa42 <USART_TX_WAIT>
            USART_TX_STRING_WAIT(itoa(k_p,buffer,10));
 3fa:	8d 89       	ldd	r24, Y+21	; 0x15
 3fc:	9e 89       	ldd	r25, Y+22	; 0x16
 3fe:	9e 01       	movw	r18, r28
 400:	2e 5d       	subi	r18, 0xDE	; 222
 402:	3f 4f       	sbci	r19, 0xFF	; 255
 404:	b9 01       	movw	r22, r18
 406:	4a e0       	ldi	r20, 0x0A	; 10
 408:	50 e0       	ldi	r21, 0x00	; 0
 40a:	0e 94 31 06 	call	0xc62	; 0xc62 <itoa>
 40e:	0e 94 38 05 	call	0xa70	; 0xa70 <USART_TX_STRING_WAIT>
            USART_TX_WAIT(' ');
 412:	80 e2       	ldi	r24, 0x20	; 32
 414:	0e 94 21 05 	call	0xa42	; 0xa42 <USART_TX_WAIT>
            USART_TX_STRING_WAIT(itoa(k_i,buffer,10));
 418:	8f 89       	ldd	r24, Y+23	; 0x17
 41a:	98 8d       	ldd	r25, Y+24	; 0x18
 41c:	9e 01       	movw	r18, r28
 41e:	2e 5d       	subi	r18, 0xDE	; 222
 420:	3f 4f       	sbci	r19, 0xFF	; 255
 422:	b9 01       	movw	r22, r18
 424:	4a e0       	ldi	r20, 0x0A	; 10
 426:	50 e0       	ldi	r21, 0x00	; 0
 428:	0e 94 31 06 	call	0xc62	; 0xc62 <itoa>
 42c:	0e 94 38 05 	call	0xa70	; 0xa70 <USART_TX_STRING_WAIT>
            USART_TX_WAIT(' ');
 430:	80 e2       	ldi	r24, 0x20	; 32
 432:	0e 94 21 05 	call	0xa42	; 0xa42 <USART_TX_WAIT>
            USART_TX_STRING_WAIT(itoa(k_d,buffer,10));
 436:	89 8d       	ldd	r24, Y+25	; 0x19
 438:	9a 8d       	ldd	r25, Y+26	; 0x1a
 43a:	9e 01       	movw	r18, r28
 43c:	2e 5d       	subi	r18, 0xDE	; 222
 43e:	3f 4f       	sbci	r19, 0xFF	; 255
 440:	b9 01       	movw	r22, r18
 442:	4a e0       	ldi	r20, 0x0A	; 10
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	0e 94 31 06 	call	0xc62	; 0xc62 <itoa>
 44a:	0e 94 38 05 	call	0xa70	; 0xa70 <USART_TX_STRING_WAIT>
            USART_TX_WAIT('\n');
 44e:	8a e0       	ldi	r24, 0x0A	; 10
 450:	0e 94 21 05 	call	0xa42	; 0xa42 <USART_TX_WAIT>
            //USART_TX_STRING_WAIT(itoa(mult_out,buffer,10));
        }

        #endif // UART_TERM

       if(adc_flag_f != adc_flag){
 454:	90 91 c2 01 	lds	r25, 0x01C2
 458:	8d 81       	ldd	r24, Y+5	; 0x05
 45a:	89 17       	cp	r24, r25
 45c:	09 f4       	brne	.+2      	; 0x460 <main+0x1ec>
 45e:	88 cf       	rjmp	.-240    	; 0x370 <main+0xfc>
           /// AD Conversion completed:
            adc_flag_f = adc_flag;
 460:	80 91 c2 01 	lds	r24, 0x01C2
 464:	8d 83       	std	Y+5, r24	; 0x05
            if(!adc_cal_flag){/// ADC Offset Removal:
 466:	8c 81       	ldd	r24, Y+4	; 0x04
 468:	88 23       	and	r24, r24
 46a:	d9 f4       	brne	.+54     	; 0x4a2 <main+0x22e>
                adc_cal_flag = 1;
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	8c 83       	std	Y+4, r24	; 0x04
                adc_cal_value = adc_value;
 470:	80 91 c3 01 	lds	r24, 0x01C3
 474:	90 91 c4 01 	lds	r25, 0x01C4
 478:	9b 83       	std	Y+3, r25	; 0x03
 47a:	8a 83       	std	Y+2, r24	; 0x02
                #ifdef UART_TERM
                    USART_TX_STRING_WAIT("ADC offset: ");
 47c:	81 e3       	ldi	r24, 0x31	; 49
 47e:	91 e0       	ldi	r25, 0x01	; 1
 480:	0e 94 38 05 	call	0xa70	; 0xa70 <USART_TX_STRING_WAIT>
                    USART_TX_STRING_WAIT(itoa( adc_cal_value, buffer, 10) );
 484:	8a 81       	ldd	r24, Y+2	; 0x02
 486:	9b 81       	ldd	r25, Y+3	; 0x03
 488:	9e 01       	movw	r18, r28
 48a:	2e 5d       	subi	r18, 0xDE	; 222
 48c:	3f 4f       	sbci	r19, 0xFF	; 255
 48e:	b9 01       	movw	r22, r18
 490:	4a e0       	ldi	r20, 0x0A	; 10
 492:	50 e0       	ldi	r21, 0x00	; 0
 494:	0e 94 31 06 	call	0xc62	; 0xc62 <itoa>
 498:	0e 94 38 05 	call	0xa70	; 0xa70 <USART_TX_STRING_WAIT>
                    USART_TX_WAIT('\n');
 49c:	8a e0       	ldi	r24, 0x0A	; 10
 49e:	0e 94 21 05 	call	0xa42	; 0xa42 <USART_TX_WAIT>
                #endif UART_TERM
            }///end if
            /// P-I-D calculations:
            error[1] = -adc_value + adc_cal_value;
 4a2:	20 91 c3 01 	lds	r18, 0x01C3
 4a6:	30 91 c4 01 	lds	r19, 0x01C4
 4aa:	8a 81       	ldd	r24, Y+2	; 0x02
 4ac:	9b 81       	ldd	r25, Y+3	; 0x03
 4ae:	82 1b       	sub	r24, r18
 4b0:	93 0b       	sbc	r25, r19
 4b2:	9c 8b       	std	Y+20, r25	; 0x14
 4b4:	8b 8b       	std	Y+19, r24	; 0x13
            error[1] = setpoint - error[1];
 4b6:	2f 85       	ldd	r18, Y+15	; 0x0f
 4b8:	38 89       	ldd	r19, Y+16	; 0x10
 4ba:	8b 89       	ldd	r24, Y+19	; 0x13
 4bc:	9c 89       	ldd	r25, Y+20	; 0x14
 4be:	a9 01       	movw	r20, r18
 4c0:	48 1b       	sub	r20, r24
 4c2:	59 0b       	sbc	r21, r25
 4c4:	ca 01       	movw	r24, r20
 4c6:	9c 8b       	std	Y+20, r25	; 0x14
 4c8:	8b 8b       	std	Y+19, r24	; 0x13
                    USART_TX_STRING_WAIT(itoa(error[1],buffer,10));
                    USART_TX_WAIT('\n');
                #endif // UART_TERM
            #endif // DEBUG

            if(error[1] != error[0]){
 4ca:	2b 89       	ldd	r18, Y+19	; 0x13
 4cc:	3c 89       	ldd	r19, Y+20	; 0x14
 4ce:	89 89       	ldd	r24, Y+17	; 0x11
 4d0:	9a 89       	ldd	r25, Y+18	; 0x12
 4d2:	28 17       	cp	r18, r24
 4d4:	39 07       	cpc	r19, r25
 4d6:	09 f4       	brne	.+2      	; 0x4da <main+0x266>
 4d8:	70 c0       	rjmp	.+224    	; 0x5ba <main+0x346>
                /// If something changed, do the calculations
                /// 1) Proportional
                y_p = error[1]*k_p;
 4da:	8b 89       	ldd	r24, Y+19	; 0x13
 4dc:	9c 89       	ldd	r25, Y+20	; 0x14
 4de:	9c 01       	movw	r18, r24
 4e0:	8d 89       	ldd	r24, Y+21	; 0x15
 4e2:	9e 89       	ldd	r25, Y+22	; 0x16
 4e4:	fc 01       	movw	r30, r24
 4e6:	2e 9f       	mul	r18, r30
 4e8:	c0 01       	movw	r24, r0
 4ea:	2f 9f       	mul	r18, r31
 4ec:	90 0d       	add	r25, r0
 4ee:	3e 9f       	mul	r19, r30
 4f0:	90 0d       	add	r25, r0
 4f2:	11 24       	eor	r1, r1
 4f4:	9c 87       	std	Y+12, r25	; 0x0c
 4f6:	8b 87       	std	Y+11, r24	; 0x0b
                        USART_TX_WAIT('\n');
                    #endif // UART_TERM
                #endif // DEBUG

                /// 2) Integral
                y_i[1] = error[1]*k_i + y_i[0];
 4f8:	8b 89       	ldd	r24, Y+19	; 0x13
 4fa:	9c 89       	ldd	r25, Y+20	; 0x14
 4fc:	9c 01       	movw	r18, r24
 4fe:	8f 89       	ldd	r24, Y+23	; 0x17
 500:	98 8d       	ldd	r25, Y+24	; 0x18
 502:	a9 01       	movw	r20, r18
 504:	48 9f       	mul	r20, r24
 506:	90 01       	movw	r18, r0
 508:	49 9f       	mul	r20, r25
 50a:	30 0d       	add	r19, r0
 50c:	58 9f       	mul	r21, r24
 50e:	30 0d       	add	r19, r0
 510:	11 24       	eor	r1, r1
 512:	8b 8d       	ldd	r24, Y+27	; 0x1b
 514:	9c 8d       	ldd	r25, Y+28	; 0x1c
 516:	82 0f       	add	r24, r18
 518:	93 1f       	adc	r25, r19
 51a:	9e 8f       	std	Y+30, r25	; 0x1e
 51c:	8d 8f       	std	Y+29, r24	; 0x1d
                if(y_i[1]>0)
 51e:	8d 8d       	ldd	r24, Y+29	; 0x1d
 520:	9e 8d       	ldd	r25, Y+30	; 0x1e
 522:	18 16       	cp	r1, r24
 524:	19 06       	cpc	r1, r25
 526:	2c f4       	brge	.+10     	; 0x532 <main+0x2be>
                    y_i[0] = y_i[1];
 528:	8d 8d       	ldd	r24, Y+29	; 0x1d
 52a:	9e 8d       	ldd	r25, Y+30	; 0x1e
 52c:	9c 8f       	std	Y+28, r25	; 0x1c
 52e:	8b 8f       	std	Y+27, r24	; 0x1b
 530:	04 c0       	rjmp	.+8      	; 0x53a <main+0x2c6>
                else
                    y_i[1] = y_i[0];
 532:	8b 8d       	ldd	r24, Y+27	; 0x1b
 534:	9c 8d       	ldd	r25, Y+28	; 0x1c
 536:	9e 8f       	std	Y+30, r25	; 0x1e
 538:	8d 8f       	std	Y+29, r24	; 0x1d

                /// 3) Differential
                y_d = (error[1]-error[0])*k_d;
 53a:	2b 89       	ldd	r18, Y+19	; 0x13
 53c:	3c 89       	ldd	r19, Y+20	; 0x14
 53e:	89 89       	ldd	r24, Y+17	; 0x11
 540:	9a 89       	ldd	r25, Y+18	; 0x12
 542:	f9 01       	movw	r30, r18
 544:	e8 1b       	sub	r30, r24
 546:	f9 0b       	sbc	r31, r25
 548:	cf 01       	movw	r24, r30
 54a:	9c 01       	movw	r18, r24
 54c:	89 8d       	ldd	r24, Y+25	; 0x19
 54e:	9a 8d       	ldd	r25, Y+26	; 0x1a
 550:	ac 01       	movw	r20, r24
 552:	24 9f       	mul	r18, r20
 554:	c0 01       	movw	r24, r0
 556:	25 9f       	mul	r18, r21
 558:	90 0d       	add	r25, r0
 55a:	34 9f       	mul	r19, r20
 55c:	90 0d       	add	r25, r0
 55e:	11 24       	eor	r1, r1
 560:	9a 87       	std	Y+10, r25	; 0x0a
 562:	89 87       	std	Y+9, r24	; 0x09

                /// 4) SUM
                y_sum = y_p + y_i[1] + y_d;
 564:	2d 8d       	ldd	r18, Y+29	; 0x1d
 566:	3e 8d       	ldd	r19, Y+30	; 0x1e
 568:	8b 85       	ldd	r24, Y+11	; 0x0b
 56a:	9c 85       	ldd	r25, Y+12	; 0x0c
 56c:	28 0f       	add	r18, r24
 56e:	39 1f       	adc	r19, r25
 570:	89 85       	ldd	r24, Y+9	; 0x09
 572:	9a 85       	ldd	r25, Y+10	; 0x0a
 574:	82 0f       	add	r24, r18
 576:	93 1f       	adc	r25, r19
 578:	98 87       	std	Y+8, r25	; 0x08
 57a:	8f 83       	std	Y+7, r24	; 0x07

                if(y_sum < 0){ /// Overflow indication
 57c:	8f 81       	ldd	r24, Y+7	; 0x07
 57e:	98 85       	ldd	r25, Y+8	; 0x08
 580:	99 23       	and	r25, r25
 582:	54 f4       	brge	.+20     	; 0x598 <main+0x324>
                    y_sum =0;
 584:	18 86       	std	Y+8, r1	; 0x08
 586:	1f 82       	std	Y+7, r1	; 0x07
                    PORT_LED |= (1<<LED_OVF_PIN);
 588:	a5 e2       	ldi	r26, 0x25	; 37
 58a:	b0 e0       	ldi	r27, 0x00	; 0
 58c:	e5 e2       	ldi	r30, 0x25	; 37
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	80 81       	ld	r24, Z
 592:	80 61       	ori	r24, 0x10	; 16
 594:	8c 93       	st	X, r24
 596:	07 c0       	rjmp	.+14     	; 0x5a6 <main+0x332>
                }else{
                    PORT_LED &= ~(1<<LED_OVF_PIN);
 598:	a5 e2       	ldi	r26, 0x25	; 37
 59a:	b0 e0       	ldi	r27, 0x00	; 0
 59c:	e5 e2       	ldi	r30, 0x25	; 37
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	80 81       	ld	r24, Z
 5a2:	8f 7e       	andi	r24, 0xEF	; 239
 5a4:	8c 93       	st	X, r24
                        USART_TX_STRING_WAIT(itoa(y_sum,buffer,10));
                        USART_TX_WAIT('\n');
                    #endif // UART_TERM
                #endif // DEBUG
                //pwm_value = (y_sum>>8)&0x7F; /// Truncate to 7-bit width
                pwm_value = (y_sum>>7); /// 8-bit width
 5a6:	8f 81       	ldd	r24, Y+7	; 0x07
 5a8:	98 85       	ldd	r25, Y+8	; 0x08
 5aa:	88 0f       	add	r24, r24
 5ac:	89 2f       	mov	r24, r25
 5ae:	88 1f       	adc	r24, r24
 5b0:	99 0b       	sbc	r25, r25
 5b2:	8e 83       	std	Y+6, r24	; 0x06
                        USART_TX_STRING_WAIT(itoa(pwm_value,buffer,10));
                        USART_TX_WAIT('\n');
                    #endif // UART_TERM
                #endif // DEBUG

               TIMER0_PWM_update(pwm_value);
 5b4:	8e 81       	ldd	r24, Y+6	; 0x06
 5b6:	0e 94 96 04 	call	0x92c	; 0x92c <TIMER0_PWM_update>


            } /// end if
            error[0] = error[1];
 5ba:	8b 89       	ldd	r24, Y+19	; 0x13
 5bc:	9c 89       	ldd	r25, Y+20	; 0x14
 5be:	9a 8b       	std	Y+18, r25	; 0x12
 5c0:	89 8b       	std	Y+17, r24	; 0x11
 5c2:	d6 ce       	rjmp	.-596    	; 0x370 <main+0xfc>

000005c4 <__vector_18>:
}

#ifdef UART_TERM

ISR(USART_RX_vect) /// ====================== UART DATA RECEPTION ===============================================
{ /// UART RX complete Interrupt:
 5c4:	1f 92       	push	r1
 5c6:	0f 92       	push	r0
 5c8:	0f b6       	in	r0, 0x3f	; 63
 5ca:	0f 92       	push	r0
 5cc:	11 24       	eor	r1, r1
 5ce:	2f 93       	push	r18
 5d0:	3f 93       	push	r19
 5d2:	4f 93       	push	r20
 5d4:	5f 93       	push	r21
 5d6:	6f 93       	push	r22
 5d8:	7f 93       	push	r23
 5da:	8f 93       	push	r24
 5dc:	9f 93       	push	r25
 5de:	af 93       	push	r26
 5e0:	bf 93       	push	r27
 5e2:	ef 93       	push	r30
 5e4:	ff 93       	push	r31
 5e6:	df 93       	push	r29
 5e8:	cf 93       	push	r28
 5ea:	cd b7       	in	r28, 0x3d	; 61
 5ec:	de b7       	in	r29, 0x3e	; 62
    cli();
 5ee:	f8 94       	cli

    /// UART TERMINAL SETTINGS:
    /// - every message must be terminated with CR+LF (0x0D 0x0A)

    /// All the variables
    if(uart_char_idx > 99){
 5f0:	80 91 d9 01 	lds	r24, 0x01D9
 5f4:	84 36       	cpi	r24, 0x64	; 100
 5f6:	70 f0       	brcs	.+28     	; 0x614 <__vector_18+0x50>
        uart_char_idx=0; /// Start overwriting the beginning
 5f8:	10 92 d9 01 	sts	0x01D9, r1
        rx_array[uart_char_idx] = UDR0; /// read UART buffer
 5fc:	80 91 d9 01 	lds	r24, 0x01D9
 600:	88 2f       	mov	r24, r24
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	e6 ec       	ldi	r30, 0xC6	; 198
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	20 81       	ld	r18, Z
 60a:	fc 01       	movw	r30, r24
 60c:	eb 53       	subi	r30, 0x3B	; 59
 60e:	fe 4f       	sbci	r31, 0xFE	; 254
 610:	20 83       	st	Z, r18
 612:	54 c0       	rjmp	.+168    	; 0x6bc <__vector_18+0xf8>
    }else if(uart_char_idx == 0){
 614:	80 91 d9 01 	lds	r24, 0x01D9
 618:	88 23       	and	r24, r24
 61a:	c9 f4       	brne	.+50     	; 0x64e <__vector_18+0x8a>
        memset(rx_array,'\0',20);
 61c:	85 ec       	ldi	r24, 0xC5	; 197
 61e:	91 e0       	ldi	r25, 0x01	; 1
 620:	60 e0       	ldi	r22, 0x00	; 0
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	44 e1       	ldi	r20, 0x14	; 20
 626:	50 e0       	ldi	r21, 0x00	; 0
 628:	0e 94 21 06 	call	0xc42	; 0xc42 <memset>
        rx_array[uart_char_idx] = UDR0; /// read UART buffer
 62c:	80 91 d9 01 	lds	r24, 0x01D9
 630:	88 2f       	mov	r24, r24
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	e6 ec       	ldi	r30, 0xC6	; 198
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	20 81       	ld	r18, Z
 63a:	fc 01       	movw	r30, r24
 63c:	eb 53       	subi	r30, 0x3B	; 59
 63e:	fe 4f       	sbci	r31, 0xFE	; 254
 640:	20 83       	st	Z, r18
        uart_char_idx++;
 642:	80 91 d9 01 	lds	r24, 0x01D9
 646:	8f 5f       	subi	r24, 0xFF	; 255
 648:	80 93 d9 01 	sts	0x01D9, r24
 64c:	37 c0       	rjmp	.+110    	; 0x6bc <__vector_18+0xf8>
        //PORTLED |= (1<<LED0_PIN);
    }else{
        rx_array[uart_char_idx] = UDR0; /// read UART buffer
 64e:	80 91 d9 01 	lds	r24, 0x01D9
 652:	88 2f       	mov	r24, r24
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	e6 ec       	ldi	r30, 0xC6	; 198
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	20 81       	ld	r18, Z
 65c:	fc 01       	movw	r30, r24
 65e:	eb 53       	subi	r30, 0x3B	; 59
 660:	fe 4f       	sbci	r31, 0xFE	; 254
 662:	20 83       	st	Z, r18
        if(rx_array[uart_char_idx] == 0x0A){ /// end of the CMD (CR char)
 664:	80 91 d9 01 	lds	r24, 0x01D9
 668:	88 2f       	mov	r24, r24
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	fc 01       	movw	r30, r24
 66e:	eb 53       	subi	r30, 0x3B	; 59
 670:	fe 4f       	sbci	r31, 0xFE	; 254
 672:	80 81       	ld	r24, Z
 674:	8a 30       	cpi	r24, 0x0A	; 10
 676:	e9 f4       	brne	.+58     	; 0x6b2 <__vector_18+0xee>
            rx_array[uart_char_idx] = 0x00; // erase 0x0A
 678:	80 91 d9 01 	lds	r24, 0x01D9
 67c:	88 2f       	mov	r24, r24
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	fc 01       	movw	r30, r24
 682:	eb 53       	subi	r30, 0x3B	; 59
 684:	fe 4f       	sbci	r31, 0xFE	; 254
 686:	10 82       	st	Z, r1
            rx_array[--uart_char_idx] = 0x00; // erase 0x0D
 688:	80 91 d9 01 	lds	r24, 0x01D9
 68c:	81 50       	subi	r24, 0x01	; 1
 68e:	80 93 d9 01 	sts	0x01D9, r24
 692:	80 91 d9 01 	lds	r24, 0x01D9
 696:	88 2f       	mov	r24, r24
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	fc 01       	movw	r30, r24
 69c:	eb 53       	subi	r30, 0x3B	; 59
 69e:	fe 4f       	sbci	r31, 0xFE	; 254
 6a0:	10 82       	st	Z, r1
            uart_flag ++; /// this variable increments each ISR. It is followed by another variable in the loop.
 6a2:	80 91 8e 01 	lds	r24, 0x018E
 6a6:	8f 5f       	subi	r24, 0xFF	; 255
 6a8:	80 93 8e 01 	sts	0x018E, r24
            /// The change of "uart_flag" triggers Command recognition procedure.
            /// However, "uart_flag" can never be modified outside this ISR! It can only be read.
            uart_char_idx = 0;
 6ac:	10 92 d9 01 	sts	0x01D9, r1
 6b0:	05 c0       	rjmp	.+10     	; 0x6bc <__vector_18+0xf8>
        }else{
            uart_char_idx++;
 6b2:	80 91 d9 01 	lds	r24, 0x01D9
 6b6:	8f 5f       	subi	r24, 0xFF	; 255
 6b8:	80 93 d9 01 	sts	0x01D9, r24
        }
    }
    sei();
 6bc:	78 94       	sei
}
 6be:	cf 91       	pop	r28
 6c0:	df 91       	pop	r29
 6c2:	ff 91       	pop	r31
 6c4:	ef 91       	pop	r30
 6c6:	bf 91       	pop	r27
 6c8:	af 91       	pop	r26
 6ca:	9f 91       	pop	r25
 6cc:	8f 91       	pop	r24
 6ce:	7f 91       	pop	r23
 6d0:	6f 91       	pop	r22
 6d2:	5f 91       	pop	r21
 6d4:	4f 91       	pop	r20
 6d6:	3f 91       	pop	r19
 6d8:	2f 91       	pop	r18
 6da:	0f 90       	pop	r0
 6dc:	0f be       	out	0x3f, r0	; 63
 6de:	0f 90       	pop	r0
 6e0:	1f 90       	pop	r1
 6e2:	18 95       	reti

000006e4 <PID_CMD_Parser>:
#include "pid.h"


uint8_t PID_CMD_Parser(int16_t *setpoint, uint16_t *Kp, uint16_t *Ki, uint16_t *Kd, int16_t *y_i0, uint8_t *mode)
{
 6e4:	ef 92       	push	r14
 6e6:	ff 92       	push	r15
 6e8:	0f 93       	push	r16
 6ea:	1f 93       	push	r17
 6ec:	df 93       	push	r29
 6ee:	cf 93       	push	r28
 6f0:	cd b7       	in	r28, 0x3d	; 61
 6f2:	de b7       	in	r29, 0x3e	; 62
 6f4:	a1 97       	sbiw	r28, 0x21	; 33
 6f6:	0f b6       	in	r0, 0x3f	; 63
 6f8:	f8 94       	cli
 6fa:	de bf       	out	0x3e, r29	; 62
 6fc:	0f be       	out	0x3f, r0	; 63
 6fe:	cd bf       	out	0x3d, r28	; 61
 700:	9f 8b       	std	Y+23, r25	; 0x17
 702:	8e 8b       	std	Y+22, r24	; 0x16
 704:	79 8f       	std	Y+25, r23	; 0x19
 706:	68 8f       	std	Y+24, r22	; 0x18
 708:	5b 8f       	std	Y+27, r21	; 0x1b
 70a:	4a 8f       	std	Y+26, r20	; 0x1a
 70c:	3d 8f       	std	Y+29, r19	; 0x1d
 70e:	2c 8f       	std	Y+28, r18	; 0x1c
 710:	1f 8f       	std	Y+31, r17	; 0x1f
 712:	0e 8f       	std	Y+30, r16	; 0x1e
 714:	f9 a2       	std	Y+33, r15	; 0x21
 716:	e8 a2       	std	Y+32, r14	; 0x20
    /// Function parses a command from UART.
    /// The command looks like: "CMDHEAD_Value"

    char CMD_Head[5] = {0,0,0,0,0};
 718:	85 e0       	ldi	r24, 0x05	; 5
 71a:	fe 01       	movw	r30, r28
 71c:	32 96       	adiw	r30, 0x02	; 2
 71e:	df 01       	movw	r26, r30
 720:	98 2f       	mov	r25, r24
 722:	1d 92       	st	X+, r1
 724:	9a 95       	dec	r25
 726:	e9 f7       	brne	.-6      	; 0x722 <PID_CMD_Parser+0x3e>
    char CMD_Data[15];
    //uint8_t cmd_num = 0;
    uint8_t i = 0;
 728:	19 82       	std	Y+1, r1	; 0x01
    memset(CMD_Head,'\0',5);
 72a:	ce 01       	movw	r24, r28
 72c:	02 96       	adiw	r24, 0x02	; 2
 72e:	60 e0       	ldi	r22, 0x00	; 0
 730:	70 e0       	ldi	r23, 0x00	; 0
 732:	45 e0       	ldi	r20, 0x05	; 5
 734:	50 e0       	ldi	r21, 0x00	; 0
 736:	0e 94 21 06 	call	0xc42	; 0xc42 <memset>
    memset(CMD_Data,'\0',15);
 73a:	ce 01       	movw	r24, r28
 73c:	07 96       	adiw	r24, 0x07	; 7
 73e:	60 e0       	ldi	r22, 0x00	; 0
 740:	70 e0       	ldi	r23, 0x00	; 0
 742:	4f e0       	ldi	r20, 0x0F	; 15
 744:	50 e0       	ldi	r21, 0x00	; 0
 746:	0e 94 21 06 	call	0xc42	; 0xc42 <memset>
 74a:	2c c0       	rjmp	.+88     	; 0x7a4 <PID_CMD_Parser+0xc0>
    /// 1) Separate the CMD Head (4-character) and CMD_Data:

    while(rx_array[i] != '\0'){
        if(i<4){
 74c:	89 81       	ldd	r24, Y+1	; 0x01
 74e:	84 30       	cpi	r24, 0x04	; 4
 750:	90 f4       	brcc	.+36     	; 0x776 <PID_CMD_Parser+0x92>
            CMD_Head[i] = rx_array[i];
 752:	89 81       	ldd	r24, Y+1	; 0x01
 754:	48 2f       	mov	r20, r24
 756:	50 e0       	ldi	r21, 0x00	; 0
 758:	89 81       	ldd	r24, Y+1	; 0x01
 75a:	88 2f       	mov	r24, r24
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	fc 01       	movw	r30, r24
 760:	eb 53       	subi	r30, 0x3B	; 59
 762:	fe 4f       	sbci	r31, 0xFE	; 254
 764:	80 81       	ld	r24, Z
 766:	28 2f       	mov	r18, r24
 768:	ce 01       	movw	r24, r28
 76a:	02 96       	adiw	r24, 0x02	; 2
 76c:	fc 01       	movw	r30, r24
 76e:	e4 0f       	add	r30, r20
 770:	f5 1f       	adc	r31, r21
 772:	20 83       	st	Z, r18
 774:	14 c0       	rjmp	.+40     	; 0x79e <PID_CMD_Parser+0xba>
        }else{
            CMD_Data[i-4] = rx_array[i];
 776:	89 81       	ldd	r24, Y+1	; 0x01
 778:	88 2f       	mov	r24, r24
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	ac 01       	movw	r20, r24
 77e:	44 50       	subi	r20, 0x04	; 4
 780:	50 40       	sbci	r21, 0x00	; 0
 782:	89 81       	ldd	r24, Y+1	; 0x01
 784:	88 2f       	mov	r24, r24
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	fc 01       	movw	r30, r24
 78a:	eb 53       	subi	r30, 0x3B	; 59
 78c:	fe 4f       	sbci	r31, 0xFE	; 254
 78e:	80 81       	ld	r24, Z
 790:	28 2f       	mov	r18, r24
 792:	ce 01       	movw	r24, r28
 794:	07 96       	adiw	r24, 0x07	; 7
 796:	fc 01       	movw	r30, r24
 798:	e4 0f       	add	r30, r20
 79a:	f5 1f       	adc	r31, r21
 79c:	20 83       	st	Z, r18
        }
        i++;
 79e:	89 81       	ldd	r24, Y+1	; 0x01
 7a0:	8f 5f       	subi	r24, 0xFF	; 255
 7a2:	89 83       	std	Y+1, r24	; 0x01
    uint8_t i = 0;
    memset(CMD_Head,'\0',5);
    memset(CMD_Data,'\0',15);
    /// 1) Separate the CMD Head (4-character) and CMD_Data:

    while(rx_array[i] != '\0'){
 7a4:	89 81       	ldd	r24, Y+1	; 0x01
 7a6:	88 2f       	mov	r24, r24
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	fc 01       	movw	r30, r24
 7ac:	eb 53       	subi	r30, 0x3B	; 59
 7ae:	fe 4f       	sbci	r31, 0xFE	; 254
 7b0:	80 81       	ld	r24, Z
 7b2:	88 23       	and	r24, r24
 7b4:	59 f6       	brne	.-106    	; 0x74c <PID_CMD_Parser+0x68>
            CMD_Data[i-4] = rx_array[i];
        }
        i++;
    }

    USART_TX_STRING_WAIT(CMD_Head);
 7b6:	ce 01       	movw	r24, r28
 7b8:	02 96       	adiw	r24, 0x02	; 2
 7ba:	0e 94 38 05 	call	0xa70	; 0xa70 <USART_TX_STRING_WAIT>
    USART_TX_WAIT('\n');
 7be:	8a e0       	ldi	r24, 0x0A	; 10
 7c0:	0e 94 21 05 	call	0xa42	; 0xa42 <USART_TX_WAIT>
    //USART_TX_STRING_WAIT(CMD_Data);
    if(!strcmp(CMD_Head,"ACC0")){
 7c4:	ce 01       	movw	r24, r28
 7c6:	02 96       	adiw	r24, 0x02	; 2
 7c8:	2e e3       	ldi	r18, 0x3E	; 62
 7ca:	31 e0       	ldi	r19, 0x01	; 1
 7cc:	b9 01       	movw	r22, r18
 7ce:	0e 94 28 06 	call	0xc50	; 0xc50 <strcmp>
 7d2:	00 97       	sbiw	r24, 0x00	; 0
 7d4:	29 f4       	brne	.+10     	; 0x7e0 <PID_CMD_Parser+0xfc>
        *y_i0 = 0;
 7d6:	ee 8d       	ldd	r30, Y+30	; 0x1e
 7d8:	ff 8d       	ldd	r31, Y+31	; 0x1f
 7da:	11 82       	std	Z+1, r1	; 0x01
 7dc:	10 82       	st	Z, r1
 7de:	5e c0       	rjmp	.+188    	; 0x89c <PID_CMD_Parser+0x1b8>
    }else if(!strcmp(CMD_Head,"SET_")){ /// Set the Setpoint
 7e0:	ce 01       	movw	r24, r28
 7e2:	02 96       	adiw	r24, 0x02	; 2
 7e4:	23 e4       	ldi	r18, 0x43	; 67
 7e6:	31 e0       	ldi	r19, 0x01	; 1
 7e8:	b9 01       	movw	r22, r18
 7ea:	0e 94 28 06 	call	0xc50	; 0xc50 <strcmp>
 7ee:	00 97       	sbiw	r24, 0x00	; 0
 7f0:	49 f4       	brne	.+18     	; 0x804 <PID_CMD_Parser+0x120>
        *setpoint = atoi(CMD_Data);
 7f2:	ce 01       	movw	r24, r28
 7f4:	07 96       	adiw	r24, 0x07	; 7
 7f6:	0e 94 03 06 	call	0xc06	; 0xc06 <atoi>
 7fa:	ee 89       	ldd	r30, Y+22	; 0x16
 7fc:	ff 89       	ldd	r31, Y+23	; 0x17
 7fe:	91 83       	std	Z+1, r25	; 0x01
 800:	80 83       	st	Z, r24
 802:	4c c0       	rjmp	.+152    	; 0x89c <PID_CMD_Parser+0x1b8>
    }else if(!strcmp(CMD_Head,"KP__")){ ///
 804:	ce 01       	movw	r24, r28
 806:	02 96       	adiw	r24, 0x02	; 2
 808:	28 e4       	ldi	r18, 0x48	; 72
 80a:	31 e0       	ldi	r19, 0x01	; 1
 80c:	b9 01       	movw	r22, r18
 80e:	0e 94 28 06 	call	0xc50	; 0xc50 <strcmp>
 812:	00 97       	sbiw	r24, 0x00	; 0
 814:	49 f4       	brne	.+18     	; 0x828 <PID_CMD_Parser+0x144>
        *Kp = atoi(CMD_Data);
 816:	ce 01       	movw	r24, r28
 818:	07 96       	adiw	r24, 0x07	; 7
 81a:	0e 94 03 06 	call	0xc06	; 0xc06 <atoi>
 81e:	e8 8d       	ldd	r30, Y+24	; 0x18
 820:	f9 8d       	ldd	r31, Y+25	; 0x19
 822:	91 83       	std	Z+1, r25	; 0x01
 824:	80 83       	st	Z, r24
 826:	3a c0       	rjmp	.+116    	; 0x89c <PID_CMD_Parser+0x1b8>
    }else if(!strcmp(CMD_Head,"KD__")){ ///
 828:	ce 01       	movw	r24, r28
 82a:	02 96       	adiw	r24, 0x02	; 2
 82c:	2d e4       	ldi	r18, 0x4D	; 77
 82e:	31 e0       	ldi	r19, 0x01	; 1
 830:	b9 01       	movw	r22, r18
 832:	0e 94 28 06 	call	0xc50	; 0xc50 <strcmp>
 836:	00 97       	sbiw	r24, 0x00	; 0
 838:	49 f4       	brne	.+18     	; 0x84c <PID_CMD_Parser+0x168>
        *Kd = atoi(CMD_Data);
 83a:	ce 01       	movw	r24, r28
 83c:	07 96       	adiw	r24, 0x07	; 7
 83e:	0e 94 03 06 	call	0xc06	; 0xc06 <atoi>
 842:	ec 8d       	ldd	r30, Y+28	; 0x1c
 844:	fd 8d       	ldd	r31, Y+29	; 0x1d
 846:	91 83       	std	Z+1, r25	; 0x01
 848:	80 83       	st	Z, r24
 84a:	28 c0       	rjmp	.+80     	; 0x89c <PID_CMD_Parser+0x1b8>
    }else if(!strcmp(CMD_Head,"KI__")){ ///
 84c:	ce 01       	movw	r24, r28
 84e:	02 96       	adiw	r24, 0x02	; 2
 850:	22 e5       	ldi	r18, 0x52	; 82
 852:	31 e0       	ldi	r19, 0x01	; 1
 854:	b9 01       	movw	r22, r18
 856:	0e 94 28 06 	call	0xc50	; 0xc50 <strcmp>
 85a:	00 97       	sbiw	r24, 0x00	; 0
 85c:	49 f4       	brne	.+18     	; 0x870 <PID_CMD_Parser+0x18c>
        *Ki = atoi(CMD_Data);
 85e:	ce 01       	movw	r24, r28
 860:	07 96       	adiw	r24, 0x07	; 7
 862:	0e 94 03 06 	call	0xc06	; 0xc06 <atoi>
 866:	ea 8d       	ldd	r30, Y+26	; 0x1a
 868:	fb 8d       	ldd	r31, Y+27	; 0x1b
 86a:	91 83       	std	Z+1, r25	; 0x01
 86c:	80 83       	st	Z, r24
 86e:	16 c0       	rjmp	.+44     	; 0x89c <PID_CMD_Parser+0x1b8>
    }else if(!strcmp(CMD_Head,"OSCM")){ /// Toggle oscillating mode
 870:	ce 01       	movw	r24, r28
 872:	02 96       	adiw	r24, 0x02	; 2
 874:	27 e5       	ldi	r18, 0x57	; 87
 876:	31 e0       	ldi	r19, 0x01	; 1
 878:	b9 01       	movw	r22, r18
 87a:	0e 94 28 06 	call	0xc50	; 0xc50 <strcmp>
 87e:	00 97       	sbiw	r24, 0x00	; 0
 880:	69 f4       	brne	.+26     	; 0x89c <PID_CMD_Parser+0x1b8>
        if(*mode == 0)
 882:	e8 a1       	ldd	r30, Y+32	; 0x20
 884:	f9 a1       	ldd	r31, Y+33	; 0x21
 886:	80 81       	ld	r24, Z
 888:	88 23       	and	r24, r24
 88a:	29 f4       	brne	.+10     	; 0x896 <PID_CMD_Parser+0x1b2>
            *mode = 1;
 88c:	e8 a1       	ldd	r30, Y+32	; 0x20
 88e:	f9 a1       	ldd	r31, Y+33	; 0x21
 890:	81 e0       	ldi	r24, 0x01	; 1
 892:	80 83       	st	Z, r24
 894:	03 c0       	rjmp	.+6      	; 0x89c <PID_CMD_Parser+0x1b8>
        else
            *mode = 0;
 896:	e8 a1       	ldd	r30, Y+32	; 0x20
 898:	f9 a1       	ldd	r31, Y+33	; 0x21
 89a:	10 82       	st	Z, r1

    }else{ /// Unknown Command

    }// end if
return 0;
 89c:	80 e0       	ldi	r24, 0x00	; 0
}
 89e:	a1 96       	adiw	r28, 0x21	; 33
 8a0:	0f b6       	in	r0, 0x3f	; 63
 8a2:	f8 94       	cli
 8a4:	de bf       	out	0x3e, r29	; 62
 8a6:	0f be       	out	0x3f, r0	; 63
 8a8:	cd bf       	out	0x3d, r28	; 61
 8aa:	cf 91       	pop	r28
 8ac:	df 91       	pop	r29
 8ae:	1f 91       	pop	r17
 8b0:	0f 91       	pop	r16
 8b2:	ff 90       	pop	r15
 8b4:	ef 90       	pop	r14
 8b6:	08 95       	ret

000008b8 <TIMER1_setup>:
#include "tim.h"


void TIMER1_setup(void)
{
 8b8:	df 93       	push	r29
 8ba:	cf 93       	push	r28
 8bc:	cd b7       	in	r28, 0x3d	; 61
 8be:	de b7       	in	r29, 0x3e	; 62
  ///   1       0       1       1024
  ///   1       1       0       Extern Falling
  ///   1       1       1       Extern Rising
    #ifdef F_CPU_16
    /// F_CPU = 16 MHz
  TCCR1A |= (0<<WGM11)|(0<<WGM10);
 8c0:	a0 e8       	ldi	r26, 0x80	; 128
 8c2:	b0 e0       	ldi	r27, 0x00	; 0
 8c4:	e0 e8       	ldi	r30, 0x80	; 128
 8c6:	f0 e0       	ldi	r31, 0x00	; 0
 8c8:	80 81       	ld	r24, Z
 8ca:	8c 93       	st	X, r24
  TCCR1B |= (0<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(1<<CS10);
 8cc:	a1 e8       	ldi	r26, 0x81	; 129
 8ce:	b0 e0       	ldi	r27, 0x00	; 0
 8d0:	e1 e8       	ldi	r30, 0x81	; 129
 8d2:	f0 e0       	ldi	r31, 0x00	; 0
 8d4:	80 81       	ld	r24, Z
 8d6:	8b 60       	ori	r24, 0x0B	; 11
 8d8:	8c 93       	st	X, r24
  /// CTC mode, N = 64
  TIMSK1 |= (0<<TOIE1)|(1<<OCIE1A);
 8da:	af e6       	ldi	r26, 0x6F	; 111
 8dc:	b0 e0       	ldi	r27, 0x00	; 0
 8de:	ef e6       	ldi	r30, 0x6F	; 111
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	80 81       	ld	r24, Z
 8e4:	82 60       	ori	r24, 0x02	; 2
 8e6:	8c 93       	st	X, r24
  /// CTC interrupt enabled
  OCR1A = 249;
 8e8:	e8 e8       	ldi	r30, 0x88	; 136
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	89 ef       	ldi	r24, 0xF9	; 249
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	91 83       	std	Z+1, r25	; 0x01
 8f2:	80 83       	st	Z, r24
  OCR1A = 499;
  /// T_ISR = 1.000 ms

  #endif // F_CPU_4

}
 8f4:	cf 91       	pop	r28
 8f6:	df 91       	pop	r29
 8f8:	08 95       	ret

000008fa <TIMER0_PWM_setup>:

void TIMER0_PWM_setup(void)
{
 8fa:	df 93       	push	r29
 8fc:	cf 93       	push	r28
 8fe:	cd b7       	in	r28, 0x3d	; 61
 900:	de b7       	in	r29, 0x3e	; 62
    /// Set TIMER0 into FAST PWM mode with OCR0A update in BOTTOM TCNT0 position.
    TCCR0A |= (1<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(1<<WGM01)|(1<<WGM00);
 902:	a4 e4       	ldi	r26, 0x44	; 68
 904:	b0 e0       	ldi	r27, 0x00	; 0
 906:	e4 e4       	ldi	r30, 0x44	; 68
 908:	f0 e0       	ldi	r31, 0x00	; 0
 90a:	80 81       	ld	r24, Z
 90c:	83 68       	ori	r24, 0x83	; 131
 90e:	8c 93       	st	X, r24

    #ifdef F_CPU_16

    //TCCR0B |= (0<<WGM02)|(0<<CS02)|(1<<CS01)|(0<<CS00); /// TIMER RUNNING
    //TCCR0B |= (0<<WGM02)|(0<<CS02)|(0<<CS01)|(0<<CS00); /// TIMER STOPPED
    TCCR0B |= (0<<WGM02)|(0<<CS02)|(0<<CS01)|(1<<CS00); /// TIMER STARTED, prescaling factor N=8
 910:	a5 e4       	ldi	r26, 0x45	; 69
 912:	b0 e0       	ldi	r27, 0x00	; 0
 914:	e5 e4       	ldi	r30, 0x45	; 69
 916:	f0 e0       	ldi	r31, 0x00	; 0
 918:	80 81       	ld	r24, Z
 91a:	81 60       	ori	r24, 0x01	; 1
 91c:	8c 93       	st	X, r24
    TCCR0B |= (1<<WGM02)|(0<<CS02)|(0<<CS01)|(1<<CS00); /// TIMER STARTED, N = 1
    ///  Fast PWM mode, OCR0x is updated at BOTTOM position of the counter.
    /// PWM frequency = 62.5 kHz
    #endif // F_CPU_4

    OCR0A = 0x7F; // 50 perc Duty cycle
 91e:	e7 e4       	ldi	r30, 0x47	; 71
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	8f e7       	ldi	r24, 0x7F	; 127
 924:	80 83       	st	Z, r24
    //OCR0B = 0x7F; // 50 perc Duty cycle

//    TIMSK0 |= (0<<TOIE0)|(1<<OCIE0A)|(0<<OCIE0B); ///OCR0A ISR
    /// No interrupt is needed for the PWM mode.
}
 926:	cf 91       	pop	r28
 928:	df 91       	pop	r29
 92a:	08 95       	ret

0000092c <TIMER0_PWM_update>:

void TIMER0_PWM_update(uint8_t PWM_value)
{
 92c:	df 93       	push	r29
 92e:	cf 93       	push	r28
 930:	0f 92       	push	r0
 932:	cd b7       	in	r28, 0x3d	; 61
 934:	de b7       	in	r29, 0x3e	; 62
 936:	89 83       	std	Y+1, r24	; 0x01
//    if(PWM_value>0)
//    OCR0A = PWM_value-1; /// DutyCycle (0 - 127)
//    else
//       OCR0A = PWM_value;
//
    OCR0A = PWM_value; /// DutyCycle (0 - 127)
 938:	e7 e4       	ldi	r30, 0x47	; 71
 93a:	f0 e0       	ldi	r31, 0x00	; 0
 93c:	89 81       	ldd	r24, Y+1	; 0x01
 93e:	80 83       	st	Z, r24

}
 940:	0f 90       	pop	r0
 942:	cf 91       	pop	r28
 944:	df 91       	pop	r29
 946:	08 95       	ret

00000948 <TIMER1_get_value>:
   return val;
}
*/

uint16_t TIMER1_get_value(void)
{
 948:	df 93       	push	r29
 94a:	cf 93       	push	r28
 94c:	00 d0       	rcall	.+0      	; 0x94e <TIMER1_get_value+0x6>
 94e:	cd b7       	in	r28, 0x3d	; 61
 950:	de b7       	in	r29, 0x3e	; 62
   uint16_t val = 0;
 952:	1a 82       	std	Y+2, r1	; 0x02
 954:	19 82       	std	Y+1, r1	; 0x01

   val = timer1_cnt;
 956:	80 91 db 01 	lds	r24, 0x01DB
 95a:	90 91 dc 01 	lds	r25, 0x01DC
 95e:	9a 83       	std	Y+2, r25	; 0x02
 960:	89 83       	std	Y+1, r24	; 0x01

   return val;
 962:	89 81       	ldd	r24, Y+1	; 0x01
 964:	9a 81       	ldd	r25, Y+2	; 0x02
}
 966:	0f 90       	pop	r0
 968:	0f 90       	pop	r0
 96a:	cf 91       	pop	r28
 96c:	df 91       	pop	r29
 96e:	08 95       	ret

00000970 <__vector_11>:

/// ================== INTERRUPT SERVICE ROUTINE ===============================



ISR(TIMER1_COMPA_vect){
 970:	1f 92       	push	r1
 972:	0f 92       	push	r0
 974:	0f b6       	in	r0, 0x3f	; 63
 976:	0f 92       	push	r0
 978:	11 24       	eor	r1, r1
 97a:	8f 93       	push	r24
 97c:	9f 93       	push	r25
 97e:	af 93       	push	r26
 980:	bf 93       	push	r27
 982:	ef 93       	push	r30
 984:	ff 93       	push	r31
 986:	df 93       	push	r29
 988:	cf 93       	push	r28
 98a:	cd b7       	in	r28, 0x3d	; 61
 98c:	de b7       	in	r29, 0x3e	; 62
    /// Every 1 ms
    timer1_cnt++;
 98e:	80 91 db 01 	lds	r24, 0x01DB
 992:	90 91 dc 01 	lds	r25, 0x01DC
 996:	01 96       	adiw	r24, 0x01	; 1
 998:	90 93 dc 01 	sts	0x01DC, r25
 99c:	80 93 db 01 	sts	0x01DB, r24
    /// Also start ADC conversion:
    ADCSRA |= (1<<ADSC);
 9a0:	aa e7       	ldi	r26, 0x7A	; 122
 9a2:	b0 e0       	ldi	r27, 0x00	; 0
 9a4:	ea e7       	ldi	r30, 0x7A	; 122
 9a6:	f0 e0       	ldi	r31, 0x00	; 0
 9a8:	80 81       	ld	r24, Z
 9aa:	80 64       	ori	r24, 0x40	; 64
 9ac:	8c 93       	st	X, r24
}
 9ae:	cf 91       	pop	r28
 9b0:	df 91       	pop	r29
 9b2:	ff 91       	pop	r31
 9b4:	ef 91       	pop	r30
 9b6:	bf 91       	pop	r27
 9b8:	af 91       	pop	r26
 9ba:	9f 91       	pop	r25
 9bc:	8f 91       	pop	r24
 9be:	0f 90       	pop	r0
 9c0:	0f be       	out	0x3f, r0	; 63
 9c2:	0f 90       	pop	r0
 9c4:	1f 90       	pop	r1
 9c6:	18 95       	reti

000009c8 <USART_init>:
#include "uart.h"


void USART_init(void)
{
 9c8:	df 93       	push	r29
 9ca:	cf 93       	push	r28
 9cc:	cd b7       	in	r28, 0x3d	; 61
 9ce:	de b7       	in	r29, 0x3e	; 62
    //UCSR0A |= (0<<U2X0)|(0<<MPCM0);
    //UBRR0H = 0x00;/// has to be written first
    //UBRR0 = 0x67; /// this updates the prescaler.

    /// For 57600 Bd:  (error =-0.8%)
    UCSR0A |= (1<<U2X0);
 9d0:	a0 ec       	ldi	r26, 0xC0	; 192
 9d2:	b0 e0       	ldi	r27, 0x00	; 0
 9d4:	e0 ec       	ldi	r30, 0xC0	; 192
 9d6:	f0 e0       	ldi	r31, 0x00	; 0
 9d8:	80 81       	ld	r24, Z
 9da:	82 60       	ori	r24, 0x02	; 2
 9dc:	8c 93       	st	X, r24
    UBRR0 = 34;
 9de:	e4 ec       	ldi	r30, 0xC4	; 196
 9e0:	f0 e0       	ldi	r31, 0x00	; 0
 9e2:	82 e2       	ldi	r24, 0x22	; 34
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	91 83       	std	Z+1, r25	; 0x01
 9e8:	80 83       	st	Z, r24

    UCSR0B |= (1<<RXCIE0)|(0<<TXCIE0)|(0<<UDRIE0)|(1<<RXEN0)|(1<<TXEN0)|(0<<UCSZ02)|(0<<RXB80)|(0<<TXB80) ;
 9ea:	a1 ec       	ldi	r26, 0xC1	; 193
 9ec:	b0 e0       	ldi	r27, 0x00	; 0
 9ee:	e1 ec       	ldi	r30, 0xC1	; 193
 9f0:	f0 e0       	ldi	r31, 0x00	; 0
 9f2:	80 81       	ld	r24, Z
 9f4:	88 69       	ori	r24, 0x98	; 152
 9f6:	8c 93       	st	X, r24
    UCSR0C |= (0<<UMSEL01)|(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00)|(0<<UCPOL0) ;
 9f8:	a2 ec       	ldi	r26, 0xC2	; 194
 9fa:	b0 e0       	ldi	r27, 0x00	; 0
 9fc:	e2 ec       	ldi	r30, 0xC2	; 194
 9fe:	f0 e0       	ldi	r31, 0x00	; 0
 a00:	80 81       	ld	r24, Z
 a02:	86 60       	ori	r24, 0x06	; 6
 a04:	8c 93       	st	X, r24
    /// no parity, 8bit data, 1 stop bit, RX complete interrupt, RX enabled, double speed mode DISABLED.
    /// see page 244 of ATMEGA328P datasheet.

    uart_flag = 0;
 a06:	10 92 8e 01 	sts	0x018E, r1
    uart_idx = 0;
 a0a:	10 92 8f 01 	sts	0x018F, r1

}
 a0e:	cf 91       	pop	r28
 a10:	df 91       	pop	r29
 a12:	08 95       	ret

00000a14 <USART_RX_WAIT>:


void USART_RX_WAIT(uint8_t *RX_Data)
{
 a14:	df 93       	push	r29
 a16:	cf 93       	push	r28
 a18:	00 d0       	rcall	.+0      	; 0xa1a <USART_RX_WAIT+0x6>
 a1a:	cd b7       	in	r28, 0x3d	; 61
 a1c:	de b7       	in	r29, 0x3e	; 62
 a1e:	9a 83       	std	Y+2, r25	; 0x02
 a20:	89 83       	std	Y+1, r24	; 0x01
    while ( (UCSR0A&0x80) != 0x80 ); /// Wait until it receives something
 a22:	e0 ec       	ldi	r30, 0xC0	; 192
 a24:	f0 e0       	ldi	r31, 0x00	; 0
 a26:	80 81       	ld	r24, Z
 a28:	88 23       	and	r24, r24
 a2a:	dc f7       	brge	.-10     	; 0xa22 <USART_RX_WAIT+0xe>
        *RX_Data = UDR0; /// After that, read the data register
 a2c:	e6 ec       	ldi	r30, 0xC6	; 198
 a2e:	f0 e0       	ldi	r31, 0x00	; 0
 a30:	80 81       	ld	r24, Z
 a32:	e9 81       	ldd	r30, Y+1	; 0x01
 a34:	fa 81       	ldd	r31, Y+2	; 0x02
 a36:	80 83       	st	Z, r24
}
 a38:	0f 90       	pop	r0
 a3a:	0f 90       	pop	r0
 a3c:	cf 91       	pop	r28
 a3e:	df 91       	pop	r29
 a40:	08 95       	ret

00000a42 <USART_TX_WAIT>:

void USART_TX_WAIT(uint8_t TX_Data)
{
 a42:	df 93       	push	r29
 a44:	cf 93       	push	r28
 a46:	0f 92       	push	r0
 a48:	cd b7       	in	r28, 0x3d	; 61
 a4a:	de b7       	in	r29, 0x3e	; 62
 a4c:	89 83       	std	Y+1, r24	; 0x01
    while ( (UCSR0A&0x20) != 0x20 ); /// Wait until TX buffer ready.
 a4e:	e0 ec       	ldi	r30, 0xC0	; 192
 a50:	f0 e0       	ldi	r31, 0x00	; 0
 a52:	80 81       	ld	r24, Z
 a54:	88 2f       	mov	r24, r24
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	80 72       	andi	r24, 0x20	; 32
 a5a:	90 70       	andi	r25, 0x00	; 0
 a5c:	00 97       	sbiw	r24, 0x00	; 0
 a5e:	b9 f3       	breq	.-18     	; 0xa4e <USART_TX_WAIT+0xc>
    UDR0 = TX_Data;  /// Send data
 a60:	e6 ec       	ldi	r30, 0xC6	; 198
 a62:	f0 e0       	ldi	r31, 0x00	; 0
 a64:	89 81       	ldd	r24, Y+1	; 0x01
 a66:	80 83       	st	Z, r24
}
 a68:	0f 90       	pop	r0
 a6a:	cf 91       	pop	r28
 a6c:	df 91       	pop	r29
 a6e:	08 95       	ret

00000a70 <USART_TX_STRING_WAIT>:

void USART_TX_STRING_WAIT(char s[])
{
 a70:	df 93       	push	r29
 a72:	cf 93       	push	r28
 a74:	00 d0       	rcall	.+0      	; 0xa76 <USART_TX_STRING_WAIT+0x6>
 a76:	00 d0       	rcall	.+0      	; 0xa78 <USART_TX_STRING_WAIT+0x8>
 a78:	cd b7       	in	r28, 0x3d	; 61
 a7a:	de b7       	in	r29, 0x3e	; 62
 a7c:	9c 83       	std	Y+4, r25	; 0x04
 a7e:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int i=0;
 a80:	1a 82       	std	Y+2, r1	; 0x02
 a82:	19 82       	std	Y+1, r1	; 0x01
 a84:	0f c0       	rjmp	.+30     	; 0xaa4 <USART_TX_STRING_WAIT+0x34>
    while( s[i] != '\0'){
        USART_TX_WAIT(s[i]);
 a86:	2b 81       	ldd	r18, Y+3	; 0x03
 a88:	3c 81       	ldd	r19, Y+4	; 0x04
 a8a:	89 81       	ldd	r24, Y+1	; 0x01
 a8c:	9a 81       	ldd	r25, Y+2	; 0x02
 a8e:	f9 01       	movw	r30, r18
 a90:	e8 0f       	add	r30, r24
 a92:	f9 1f       	adc	r31, r25
 a94:	80 81       	ld	r24, Z
 a96:	0e 94 21 05 	call	0xa42	; 0xa42 <USART_TX_WAIT>
        i++;
 a9a:	89 81       	ldd	r24, Y+1	; 0x01
 a9c:	9a 81       	ldd	r25, Y+2	; 0x02
 a9e:	01 96       	adiw	r24, 0x01	; 1
 aa0:	9a 83       	std	Y+2, r25	; 0x02
 aa2:	89 83       	std	Y+1, r24	; 0x01
}

void USART_TX_STRING_WAIT(char s[])
{
    unsigned int i=0;
    while( s[i] != '\0'){
 aa4:	2b 81       	ldd	r18, Y+3	; 0x03
 aa6:	3c 81       	ldd	r19, Y+4	; 0x04
 aa8:	89 81       	ldd	r24, Y+1	; 0x01
 aaa:	9a 81       	ldd	r25, Y+2	; 0x02
 aac:	f9 01       	movw	r30, r18
 aae:	e8 0f       	add	r30, r24
 ab0:	f9 1f       	adc	r31, r25
 ab2:	80 81       	ld	r24, Z
 ab4:	88 23       	and	r24, r24
 ab6:	39 f7       	brne	.-50     	; 0xa86 <USART_TX_STRING_WAIT+0x16>
        USART_TX_WAIT(s[i]);
        i++;
    }
    //USART_TX_WAIT('\n');
}
 ab8:	0f 90       	pop	r0
 aba:	0f 90       	pop	r0
 abc:	0f 90       	pop	r0
 abe:	0f 90       	pop	r0
 ac0:	cf 91       	pop	r28
 ac2:	df 91       	pop	r29
 ac4:	08 95       	ret

00000ac6 <USART_get_flag>:

uint8_t USART_get_flag(void)
{
 ac6:	df 93       	push	r29
 ac8:	cf 93       	push	r28
 aca:	00 d0       	rcall	.+0      	; 0xacc <USART_get_flag+0x6>
 acc:	cd b7       	in	r28, 0x3d	; 61
 ace:	de b7       	in	r29, 0x3e	; 62
    uint16_t val = 0;
 ad0:	1a 82       	std	Y+2, r1	; 0x02
 ad2:	19 82       	std	Y+1, r1	; 0x01
    UCSR0B &= ~(1<<RXCIE0); // disable USART RX interrupt
 ad4:	a1 ec       	ldi	r26, 0xC1	; 193
 ad6:	b0 e0       	ldi	r27, 0x00	; 0
 ad8:	e1 ec       	ldi	r30, 0xC1	; 193
 ada:	f0 e0       	ldi	r31, 0x00	; 0
 adc:	80 81       	ld	r24, Z
 ade:	8f 77       	andi	r24, 0x7F	; 127
 ae0:	8c 93       	st	X, r24
    val = uart_flag;
 ae2:	80 91 8e 01 	lds	r24, 0x018E
 ae6:	88 2f       	mov	r24, r24
 ae8:	90 e0       	ldi	r25, 0x00	; 0
 aea:	9a 83       	std	Y+2, r25	; 0x02
 aec:	89 83       	std	Y+1, r24	; 0x01
    UCSR0B |= (1<<RXCIE0); // enable
 aee:	a1 ec       	ldi	r26, 0xC1	; 193
 af0:	b0 e0       	ldi	r27, 0x00	; 0
 af2:	e1 ec       	ldi	r30, 0xC1	; 193
 af4:	f0 e0       	ldi	r31, 0x00	; 0
 af6:	80 81       	ld	r24, Z
 af8:	80 68       	ori	r24, 0x80	; 128
 afa:	8c 93       	st	X, r24
    return val;
 afc:	89 81       	ldd	r24, Y+1	; 0x01
}
 afe:	0f 90       	pop	r0
 b00:	0f 90       	pop	r0
 b02:	cf 91       	pop	r28
 b04:	df 91       	pop	r29
 b06:	08 95       	ret

00000b08 <CMD_Head_lib>:
    }// end if
}
*/

uint8_t CMD_Head_lib(char CMD_head[5])
{
 b08:	df 93       	push	r29
 b0a:	cf 93       	push	r28
 b0c:	00 d0       	rcall	.+0      	; 0xb0e <CMD_Head_lib+0x6>
 b0e:	0f 92       	push	r0
 b10:	cd b7       	in	r28, 0x3d	; 61
 b12:	de b7       	in	r29, 0x3e	; 62
 b14:	9a 83       	std	Y+2, r25	; 0x02
 b16:	89 83       	std	Y+1, r24	; 0x01

    if(!strcmp(CMD_head,"TRX_")){       /// Send data
 b18:	89 81       	ldd	r24, Y+1	; 0x01
 b1a:	9a 81       	ldd	r25, Y+2	; 0x02
 b1c:	2c e5       	ldi	r18, 0x5C	; 92
 b1e:	31 e0       	ldi	r19, 0x01	; 1
 b20:	b9 01       	movw	r22, r18
 b22:	0e 94 28 06 	call	0xc50	; 0xc50 <strcmp>
 b26:	00 97       	sbiw	r24, 0x00	; 0
 b28:	19 f4       	brne	.+6      	; 0xb30 <CMD_Head_lib+0x28>
        return 0x40;
 b2a:	80 e4       	ldi	r24, 0x40	; 64
 b2c:	8b 83       	std	Y+3, r24	; 0x03
 b2e:	64 c0       	rjmp	.+200    	; 0xbf8 <CMD_Head_lib+0xf0>
    }else if(!strcmp(CMD_head,"TXB_")){ /// (CMD invalid)
 b30:	89 81       	ldd	r24, Y+1	; 0x01
 b32:	9a 81       	ldd	r25, Y+2	; 0x02
 b34:	21 e6       	ldi	r18, 0x61	; 97
 b36:	31 e0       	ldi	r19, 0x01	; 1
 b38:	b9 01       	movw	r22, r18
 b3a:	0e 94 28 06 	call	0xc50	; 0xc50 <strcmp>
 b3e:	00 97       	sbiw	r24, 0x00	; 0
 b40:	11 f4       	brne	.+4      	; 0xb46 <CMD_Head_lib+0x3e>
        return 0;
 b42:	1b 82       	std	Y+3, r1	; 0x03
 b44:	59 c0       	rjmp	.+178    	; 0xbf8 <CMD_Head_lib+0xf0>
    }else if(!strcmp(CMD_head,"STOT")){ /// Stop TEST 1
 b46:	89 81       	ldd	r24, Y+1	; 0x01
 b48:	9a 81       	ldd	r25, Y+2	; 0x02
 b4a:	26 e6       	ldi	r18, 0x66	; 102
 b4c:	31 e0       	ldi	r19, 0x01	; 1
 b4e:	b9 01       	movw	r22, r18
 b50:	0e 94 28 06 	call	0xc50	; 0xc50 <strcmp>
 b54:	00 97       	sbiw	r24, 0x00	; 0
 b56:	11 f4       	brne	.+4      	; 0xb5c <CMD_Head_lib+0x54>
        return 0;
 b58:	1b 82       	std	Y+3, r1	; 0x03
 b5a:	4e c0       	rjmp	.+156    	; 0xbf8 <CMD_Head_lib+0xf0>
    }else if(!strcmp(CMD_head,"SIDL")){ /// (CMD invalid)
 b5c:	89 81       	ldd	r24, Y+1	; 0x01
 b5e:	9a 81       	ldd	r25, Y+2	; 0x02
 b60:	2b e6       	ldi	r18, 0x6B	; 107
 b62:	31 e0       	ldi	r19, 0x01	; 1
 b64:	b9 01       	movw	r22, r18
 b66:	0e 94 28 06 	call	0xc50	; 0xc50 <strcmp>
 b6a:	00 97       	sbiw	r24, 0x00	; 0
 b6c:	11 f4       	brne	.+4      	; 0xb72 <CMD_Head_lib+0x6a>
        return 0;
 b6e:	1b 82       	std	Y+3, r1	; 0x03
 b70:	43 c0       	rjmp	.+134    	; 0xbf8 <CMD_Head_lib+0xf0>
    }else if(!strcmp(CMD_head,"CONF")){ /// (CMD invalid)
 b72:	89 81       	ldd	r24, Y+1	; 0x01
 b74:	9a 81       	ldd	r25, Y+2	; 0x02
 b76:	20 e7       	ldi	r18, 0x70	; 112
 b78:	31 e0       	ldi	r19, 0x01	; 1
 b7a:	b9 01       	movw	r22, r18
 b7c:	0e 94 28 06 	call	0xc50	; 0xc50 <strcmp>
 b80:	00 97       	sbiw	r24, 0x00	; 0
 b82:	11 f4       	brne	.+4      	; 0xb88 <CMD_Head_lib+0x80>
        return 0;
 b84:	1b 82       	std	Y+3, r1	; 0x03
 b86:	38 c0       	rjmp	.+112    	; 0xbf8 <CMD_Head_lib+0xf0>
    }else if(!strcmp(CMD_head,"RESA")){ /// (CMD invalid)
 b88:	89 81       	ldd	r24, Y+1	; 0x01
 b8a:	9a 81       	ldd	r25, Y+2	; 0x02
 b8c:	25 e7       	ldi	r18, 0x75	; 117
 b8e:	31 e0       	ldi	r19, 0x01	; 1
 b90:	b9 01       	movw	r22, r18
 b92:	0e 94 28 06 	call	0xc50	; 0xc50 <strcmp>
 b96:	00 97       	sbiw	r24, 0x00	; 0
 b98:	11 f4       	brne	.+4      	; 0xb9e <CMD_Head_lib+0x96>
        return 0;
 b9a:	1b 82       	std	Y+3, r1	; 0x03
 b9c:	2d c0       	rjmp	.+90     	; 0xbf8 <CMD_Head_lib+0xf0>
    }else if(!strcmp(CMD_head,"RESB")){ /// (CMD invalid)
 b9e:	89 81       	ldd	r24, Y+1	; 0x01
 ba0:	9a 81       	ldd	r25, Y+2	; 0x02
 ba2:	2a e7       	ldi	r18, 0x7A	; 122
 ba4:	31 e0       	ldi	r19, 0x01	; 1
 ba6:	b9 01       	movw	r22, r18
 ba8:	0e 94 28 06 	call	0xc50	; 0xc50 <strcmp>
 bac:	00 97       	sbiw	r24, 0x00	; 0
 bae:	11 f4       	brne	.+4      	; 0xbb4 <CMD_Head_lib+0xac>
        return 0;
 bb0:	1b 82       	std	Y+3, r1	; 0x03
 bb2:	22 c0       	rjmp	.+68     	; 0xbf8 <CMD_Head_lib+0xf0>
    }else if(!strcmp(CMD_head,"RDC_")){ /// (CMD invalid)
 bb4:	89 81       	ldd	r24, Y+1	; 0x01
 bb6:	9a 81       	ldd	r25, Y+2	; 0x02
 bb8:	2f e7       	ldi	r18, 0x7F	; 127
 bba:	31 e0       	ldi	r19, 0x01	; 1
 bbc:	b9 01       	movw	r22, r18
 bbe:	0e 94 28 06 	call	0xc50	; 0xc50 <strcmp>
 bc2:	00 97       	sbiw	r24, 0x00	; 0
 bc4:	11 f4       	brne	.+4      	; 0xbca <CMD_Head_lib+0xc2>
        return 0;
 bc6:	1b 82       	std	Y+3, r1	; 0x03
 bc8:	17 c0       	rjmp	.+46     	; 0xbf8 <CMD_Head_lib+0xf0>
    }else if(!strcmp(CMD_head,"SNOP")){ /// (CMD invalid)
 bca:	89 81       	ldd	r24, Y+1	; 0x01
 bcc:	9a 81       	ldd	r25, Y+2	; 0x02
 bce:	24 e8       	ldi	r18, 0x84	; 132
 bd0:	31 e0       	ldi	r19, 0x01	; 1
 bd2:	b9 01       	movw	r22, r18
 bd4:	0e 94 28 06 	call	0xc50	; 0xc50 <strcmp>
 bd8:	00 97       	sbiw	r24, 0x00	; 0
 bda:	11 f4       	brne	.+4      	; 0xbe0 <CMD_Head_lib+0xd8>
        return 0;
 bdc:	1b 82       	std	Y+3, r1	; 0x03
 bde:	0c c0       	rjmp	.+24     	; 0xbf8 <CMD_Head_lib+0xf0>
    }else if(!strcmp(CMD_head,"FLFF")){ /// (CMD invalid)
 be0:	89 81       	ldd	r24, Y+1	; 0x01
 be2:	9a 81       	ldd	r25, Y+2	; 0x02
 be4:	29 e8       	ldi	r18, 0x89	; 137
 be6:	31 e0       	ldi	r19, 0x01	; 1
 be8:	b9 01       	movw	r22, r18
 bea:	0e 94 28 06 	call	0xc50	; 0xc50 <strcmp>
 bee:	00 97       	sbiw	r24, 0x00	; 0
 bf0:	11 f4       	brne	.+4      	; 0xbf6 <CMD_Head_lib+0xee>
        return 0;
 bf2:	1b 82       	std	Y+3, r1	; 0x03
 bf4:	01 c0       	rjmp	.+2      	; 0xbf8 <CMD_Head_lib+0xf0>
        //return 10;
    //}else if(!strcmp(CMD_head,"RDCB")){ /// read back config regs B
    }else{ /// Unknown Command
        return 0x00;
 bf6:	1b 82       	std	Y+3, r1	; 0x03
 bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    }// end if
}
 bfa:	0f 90       	pop	r0
 bfc:	0f 90       	pop	r0
 bfe:	0f 90       	pop	r0
 c00:	cf 91       	pop	r28
 c02:	df 91       	pop	r29
 c04:	08 95       	ret

00000c06 <atoi>:
 c06:	fc 01       	movw	r30, r24
 c08:	88 27       	eor	r24, r24
 c0a:	99 27       	eor	r25, r25
 c0c:	e8 94       	clt
 c0e:	21 91       	ld	r18, Z+
 c10:	20 32       	cpi	r18, 0x20	; 32
 c12:	e9 f3       	breq	.-6      	; 0xc0e <atoi+0x8>
 c14:	29 30       	cpi	r18, 0x09	; 9
 c16:	10 f0       	brcs	.+4      	; 0xc1c <atoi+0x16>
 c18:	2e 30       	cpi	r18, 0x0E	; 14
 c1a:	c8 f3       	brcs	.-14     	; 0xc0e <atoi+0x8>
 c1c:	2b 32       	cpi	r18, 0x2B	; 43
 c1e:	41 f0       	breq	.+16     	; 0xc30 <atoi+0x2a>
 c20:	2d 32       	cpi	r18, 0x2D	; 45
 c22:	39 f4       	brne	.+14     	; 0xc32 <atoi+0x2c>
 c24:	68 94       	set
 c26:	04 c0       	rjmp	.+8      	; 0xc30 <atoi+0x2a>
 c28:	0e 94 52 06 	call	0xca4	; 0xca4 <__mulhi_const_10>
 c2c:	82 0f       	add	r24, r18
 c2e:	91 1d       	adc	r25, r1
 c30:	21 91       	ld	r18, Z+
 c32:	20 53       	subi	r18, 0x30	; 48
 c34:	2a 30       	cpi	r18, 0x0A	; 10
 c36:	c0 f3       	brcs	.-16     	; 0xc28 <atoi+0x22>
 c38:	1e f4       	brtc	.+6      	; 0xc40 <atoi+0x3a>
 c3a:	90 95       	com	r25
 c3c:	81 95       	neg	r24
 c3e:	9f 4f       	sbci	r25, 0xFF	; 255
 c40:	08 95       	ret

00000c42 <memset>:
 c42:	dc 01       	movw	r26, r24
 c44:	01 c0       	rjmp	.+2      	; 0xc48 <memset+0x6>
 c46:	6d 93       	st	X+, r22
 c48:	41 50       	subi	r20, 0x01	; 1
 c4a:	50 40       	sbci	r21, 0x00	; 0
 c4c:	e0 f7       	brcc	.-8      	; 0xc46 <memset+0x4>
 c4e:	08 95       	ret

00000c50 <strcmp>:
 c50:	fb 01       	movw	r30, r22
 c52:	dc 01       	movw	r26, r24
 c54:	8d 91       	ld	r24, X+
 c56:	01 90       	ld	r0, Z+
 c58:	80 19       	sub	r24, r0
 c5a:	01 10       	cpse	r0, r1
 c5c:	d9 f3       	breq	.-10     	; 0xc54 <strcmp+0x4>
 c5e:	99 0b       	sbc	r25, r25
 c60:	08 95       	ret

00000c62 <itoa>:
 c62:	fb 01       	movw	r30, r22
 c64:	9f 01       	movw	r18, r30
 c66:	e8 94       	clt
 c68:	42 30       	cpi	r20, 0x02	; 2
 c6a:	c4 f0       	brlt	.+48     	; 0xc9c <itoa+0x3a>
 c6c:	45 32       	cpi	r20, 0x25	; 37
 c6e:	b4 f4       	brge	.+44     	; 0xc9c <itoa+0x3a>
 c70:	4a 30       	cpi	r20, 0x0A	; 10
 c72:	29 f4       	brne	.+10     	; 0xc7e <itoa+0x1c>
 c74:	97 fb       	bst	r25, 7
 c76:	1e f4       	brtc	.+6      	; 0xc7e <itoa+0x1c>
 c78:	90 95       	com	r25
 c7a:	81 95       	neg	r24
 c7c:	9f 4f       	sbci	r25, 0xFF	; 255
 c7e:	64 2f       	mov	r22, r20
 c80:	77 27       	eor	r23, r23
 c82:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__udivmodhi4>
 c86:	80 5d       	subi	r24, 0xD0	; 208
 c88:	8a 33       	cpi	r24, 0x3A	; 58
 c8a:	0c f0       	brlt	.+2      	; 0xc8e <itoa+0x2c>
 c8c:	89 5d       	subi	r24, 0xD9	; 217
 c8e:	81 93       	st	Z+, r24
 c90:	cb 01       	movw	r24, r22
 c92:	00 97       	sbiw	r24, 0x00	; 0
 c94:	a1 f7       	brne	.-24     	; 0xc7e <itoa+0x1c>
 c96:	16 f4       	brtc	.+4      	; 0xc9c <itoa+0x3a>
 c98:	5d e2       	ldi	r21, 0x2D	; 45
 c9a:	51 93       	st	Z+, r21
 c9c:	10 82       	st	Z, r1
 c9e:	c9 01       	movw	r24, r18
 ca0:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <strrev>

00000ca4 <__mulhi_const_10>:
 ca4:	7a e0       	ldi	r23, 0x0A	; 10
 ca6:	97 9f       	mul	r25, r23
 ca8:	90 2d       	mov	r25, r0
 caa:	87 9f       	mul	r24, r23
 cac:	80 2d       	mov	r24, r0
 cae:	91 0d       	add	r25, r1
 cb0:	11 24       	eor	r1, r1
 cb2:	08 95       	ret

00000cb4 <strrev>:
 cb4:	dc 01       	movw	r26, r24
 cb6:	fc 01       	movw	r30, r24
 cb8:	67 2f       	mov	r22, r23
 cba:	71 91       	ld	r23, Z+
 cbc:	77 23       	and	r23, r23
 cbe:	e1 f7       	brne	.-8      	; 0xcb8 <strrev+0x4>
 cc0:	32 97       	sbiw	r30, 0x02	; 2
 cc2:	04 c0       	rjmp	.+8      	; 0xccc <strrev+0x18>
 cc4:	7c 91       	ld	r23, X
 cc6:	6d 93       	st	X+, r22
 cc8:	70 83       	st	Z, r23
 cca:	62 91       	ld	r22, -Z
 ccc:	ae 17       	cp	r26, r30
 cce:	bf 07       	cpc	r27, r31
 cd0:	c8 f3       	brcs	.-14     	; 0xcc4 <strrev+0x10>
 cd2:	08 95       	ret

00000cd4 <__udivmodhi4>:
 cd4:	aa 1b       	sub	r26, r26
 cd6:	bb 1b       	sub	r27, r27
 cd8:	51 e1       	ldi	r21, 0x11	; 17
 cda:	07 c0       	rjmp	.+14     	; 0xcea <__udivmodhi4_ep>

00000cdc <__udivmodhi4_loop>:
 cdc:	aa 1f       	adc	r26, r26
 cde:	bb 1f       	adc	r27, r27
 ce0:	a6 17       	cp	r26, r22
 ce2:	b7 07       	cpc	r27, r23
 ce4:	10 f0       	brcs	.+4      	; 0xcea <__udivmodhi4_ep>
 ce6:	a6 1b       	sub	r26, r22
 ce8:	b7 0b       	sbc	r27, r23

00000cea <__udivmodhi4_ep>:
 cea:	88 1f       	adc	r24, r24
 cec:	99 1f       	adc	r25, r25
 cee:	5a 95       	dec	r21
 cf0:	a9 f7       	brne	.-22     	; 0xcdc <__udivmodhi4_loop>
 cf2:	80 95       	com	r24
 cf4:	90 95       	com	r25
 cf6:	bc 01       	movw	r22, r24
 cf8:	cd 01       	movw	r24, r26
 cfa:	08 95       	ret

00000cfc <_exit>:
 cfc:	f8 94       	cli

00000cfe <__stop_program>:
 cfe:	ff cf       	rjmp	.-2      	; 0xcfe <__stop_program>
